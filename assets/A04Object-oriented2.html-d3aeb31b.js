import{_ as a,o as s,c as e,d as t}from"./app-b8bf1712.js";const n="/assets/01-53dc9766.png",i="/assets/02-d947c009.png",c="/assets/03-b5742e4a.png",r="/assets/04-360c9223.png",p="/assets/05-39271d56.png",l="/assets/06-1b0a0a1a.png",o="/assets/07-60bc94e5.png",m="/assets/08-308fc766.png",d="/assets/09-38ecdccf.png",u="/assets/10-58f6cefd.png",h="/assets/11-26726233.png",_="/assets/12-9742e3c6.png",g="/assets/13-323ba7bd.png",b="/assets/14-4234fabc.png",f="/assets/15-358d9641.png",y="/assets/16-edd0f0fa.png",k="/assets/17-3b9a31d6.png",x="/assets/18-42f94a5f.png",v="/assets/19-7859bca9.png",C="/assets/20-3824c977.png",A="/assets/21-8f847382.png",j="/assets/22-025532ba.png",w="/assets/23-69a2c5d2.png",F="/assets/24-9c8b9e06.png",S="/assets/25-158f756d.png",q="/assets/26-e41f6847.png",B="/assets/27-e6e38457.png",O="/assets/28-9bb26d6c.png",E="/assets/29-79502d9d.png",I="/assets/30-1ed9ef65.png",D="/assets/31-768e9d5d.png",z="/assets/32-bec7ed6f.png",N="/assets/33-9b0f8444.png",V="/assets/34-39a4ab2d.png",G="/assets/35-af9aab27.png",H="/assets/36-ce6d76a6.png",J="/assets/37-5ae02d39.png",K="/assets/38-c3911fa0.png",L="/assets/39-2ee0def4.png",M="/assets/40-0b24d725.png",P="/assets/41-9db7b9ad.png",Q="/assets/42-f4ee3909.png",R={},T=t('<h2 id="_1、" tabindex="-1"><a class="header-anchor" href="#_1、" aria-hidden="true">#</a> 1、</h2><p><img src="'+n+'" alt="image-20231221155516487"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>A</p><p>B</p><p>C</p><p>先调用<strong>父类</strong>，再调用<strong>子类</strong></p></details><h2 id="_2、" tabindex="-1"><a class="header-anchor" href="#_2、" aria-hidden="true">#</a> 2、</h2><p><img src="'+i+'" alt="image-20231221155725742"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>A</p><p>B</p><p>C</p><p>显示调用 super();</p></details><h2 id="_3、" tabindex="-1"><a class="header-anchor" href="#_3、" aria-hidden="true">#</a> 3、</h2><p><img src="'+c+'" alt="image-20231221155803008"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>程序出错</p><p>原因：父类A、B的参数没有被初始化</p></details><h2 id="_4、" tabindex="-1"><a class="header-anchor" href="#_4、" aria-hidden="true">#</a> 4、</h2><p><img src="'+r+'" alt="image-20231221155833748"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>A</p><p>B</p><p>C</p></details><h2 id="_5、" tabindex="-1"><a class="header-anchor" href="#_5、" aria-hidden="true">#</a> 5、</h2><p><img src="'+p+'" alt="image-20231221155900951"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Class Animal:str</p><p>Class Fish</p></details><h2 id="_6、" tabindex="-1"><a class="header-anchor" href="#_6、" aria-hidden="true">#</a> 6、</h2><p><img src="'+l+'" alt="image-20231221160145347"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Class Animal1</p><p>Class Fish</p><p>子类 Fish 隐式调用 super(); 由于没有传递参数，所以输出Animal类中无参构造函数中的内容。</p></details><h2 id="_7、" tabindex="-1"><a class="header-anchor" href="#_7、" aria-hidden="true">#</a> 7、</h2><p><img src="'+o+'" alt="image-20231221160323815"></p><details class="custom-container details"><summary class="custom-container-title">以上程序第几行会报错</summary><p>第 7 行</p><p>原因：父类构造函数有参数，而执行 new Fish() 时在第 7 行隐式调用 super(); 没有传递参数，故而在第 7 行报错。</p></details><h2 id="_8、" tabindex="-1"><a class="header-anchor" href="#_8、" aria-hidden="true">#</a> 8、</h2><p><img src="'+m+'" alt="image-20231221160605287"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Class Animal:f1</p><p>Class Fish</p><p>Class Animal:noname</p><p>Class Fish</p></details><h2 id="_9、" tabindex="-1"><a class="header-anchor" href="#_9、" aria-hidden="true">#</a> 9、</h2><p><img src="'+d+'" alt="image-20231221160638231"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Class Animal:f1</p><p>Class Fish2</p><p>Class Animal:li</p><p>Class Fish1</p></details><h2 id="_10、" tabindex="-1"><a class="header-anchor" href="#_10、" aria-hidden="true">#</a> 10、</h2><p><img src="'+u+'" alt="image-20231221160704560"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Employee:zhao,2000.0</p><p>重写了 Object 中的方法 toString()</p><p>注意：getIncome 是 double 类型</p></details><h2 id="_11、" tabindex="-1"><a class="header-anchor" href="#_11、" aria-hidden="true">#</a> 11、</h2><p><img src="'+h+'" alt="image-20231221160733609"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Employee:zhao,2000.0</p></details><h2 id="_12、" tabindex="-1"><a class="header-anchor" href="#_12、" aria-hidden="true">#</a> 12、</h2><p><img src="'+_+'" alt="image-20231221160753212"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>obj.equals(obj2)=false</p><p>obj.equals(obj3)=true</p><p>只有在两个对象变量指向同一个对象时 equals 方法才返回 true</p><p>由于 obj 和 obj2 都 new 了新的 Object()，因此两者相较是false，</p><p>而 obj3 的存的地址和 obj 存的一样，因此两者都指向了同一个 Object 的对象，所以，他们相较是 true</p></details><h2 id="_13、" tabindex="-1"><a class="header-anchor" href="#_13、" aria-hidden="true">#</a> 13、</h2><p><img src="'+g+'" alt="image-20231221160834773"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>false</p><p>e1 和 e2 指向的是不同的对象，因此 equals 之后为 false</p></details><h2 id="_14、" tabindex="-1"><a class="header-anchor" href="#_14、" aria-hidden="true">#</a> 14、</h2><p><img src="'+b+'" alt="image-20231221160858794"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>true</p><p>解析：</p><ul><li>equals(); 方法用于引用数据类型比较时，比较的是地址</li><li>equals(); 方法用于基本数据类型比较时，比较的是值</li></ul></details><h2 id="_15、" tabindex="-1"><a class="header-anchor" href="#_15、" aria-hidden="true">#</a> 15、</h2><p><img src="'+f+'" alt="image-20231221161002578"></p><p><img src="'+y+`" alt="image-20231221161017562"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>true</p><p>true</p><p>true</p><p>false</p><p>instanceof 关键字来判断该对象变量所“指向”的对象是否属于该类。</p><p>例如：a instanceof Animal; 如果对象 A 属于 Animal 类，则返回 true，否则返回 false</p><p><strong>一个对象属于子类，那么它一定属于父类</strong></p><p>向上转型与向下转型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 父类：Father；子类：Son； </span>
<span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上转型，f1指向Son的对象 </span>
<span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span> <span class="token comment">// 向下转型（需要用到强制类型转换） </span>
<span class="token comment">// 此处的f1和s1均属于Son类  </span>

<span class="token class-name">Father</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Son</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错，子类引用不能指向父类对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_16、" tabindex="-1"><a class="header-anchor" href="#_16、" aria-hidden="true">#</a> 16、</h2><p><img src="`+k+'" alt="image-20231221161205872"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>出错</p><p>Animal 没有 getFurColor() 方法</p></details><h2 id="_17、" tabindex="-1"><a class="header-anchor" href="#_17、" aria-hidden="true">#</a> 17、</h2><p><img src="'+x+'" alt="image-20231221161224623"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>旺财</p><p>true</p><p>true</p></details><h2 id="_18、" tabindex="-1"><a class="header-anchor" href="#_18、" aria-hidden="true">#</a> 18、</h2><p><img src="'+v+`" alt="image-20231221161249702"></p><details class="custom-container details"><summary class="custom-container-title">程序哪几行会出错，注释错误行之后输出什么内容</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cat</span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>an<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getEyesColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码会出错</p><p>注释之后，输出：<code>yellow</code></p><p>Dog 和 Cat 不是父子类关系，无法转型</p></details><h2 id="_19、" tabindex="-1"><a class="header-anchor" href="#_19、" aria-hidden="true">#</a> 19、</h2><p><img src="`+C+'" alt="image-20231221161342578"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>叫声</p><p>喵喵</p><p>汪汪</p><p>对象调用一个重写方法时，调用的是<strong>实例类型（Cat、Dog）</strong>，而不是<strong>对象类型（Animal）</strong></p></details><h2 id="_20、" tabindex="-1"><a class="header-anchor" href="#_20、" aria-hidden="true">#</a> 20、</h2><p><img src="'+A+'" alt="image-20231221161405276"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>喵喵</p><p>汪汪</p></details><h2 id="_21、" tabindex="-1"><a class="header-anchor" href="#_21、" aria-hidden="true">#</a> 21、</h2><p><img src="'+j+'" alt="image-20231221161428595"></p><p><img src="'+w+'" alt="image-20231221161438469"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>喵喵</p><p>汪汪</p></details><h2 id="_22、" tabindex="-1"><a class="header-anchor" href="#_22、" aria-hidden="true">#</a> 22、</h2><p><img src="'+F+'" alt="image-20231221161506380"></p><p><img src="'+S+'" alt="image-20231221161515377"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>draw circle</p><p>draw square</p></details><h2 id="_23、" tabindex="-1"><a class="header-anchor" href="#_23、" aria-hidden="true">#</a> 23、</h2><p><img src="'+q+'" alt="image-20231221161534812"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>draw circle</p><p>draw square</p></details><h2 id="_24、" tabindex="-1"><a class="header-anchor" href="#_24、" aria-hidden="true">#</a> 24、</h2><p><img src="'+B+'" alt="image-20231221161555170"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>draw circle</p><p>draw square</p><p>draw circle</p><p>draw square</p></details><h2 id="_25、" tabindex="-1"><a class="header-anchor" href="#_25、" aria-hidden="true">#</a> 25、</h2><p><img src="'+O+'" alt="image-20231221161638811"></p><details class="custom-container details"><summary class="custom-container-title">以下哪句不能通过编译？运行时会发生错误？</summary><p>第 3 句会发生错误</p><p>Employee 中没有 getBonus(); 方法</p></details><h2 id="_26、" tabindex="-1"><a class="header-anchor" href="#_26、" aria-hidden="true">#</a> 26、</h2><p><img src="'+E+'" alt="image-20231221161717176"></p><details class="custom-container details"><summary class="custom-container-title">以下哪句不能通过编译？运行时会发生错误？</summary><p>第 3、4 句会发生错误</p></details><h2 id="_27、" tabindex="-1"><a class="header-anchor" href="#_27、" aria-hidden="true">#</a> 27、</h2><p><img src="'+I+'" alt="image-20231221161738951"></p><details class="custom-container details"><summary class="custom-container-title">以下哪句不能通过编译？运行时会发生错误？</summary><p>第 1、4 句会发生错误</p></details><h2 id="_28、" tabindex="-1"><a class="header-anchor" href="#_28、" aria-hidden="true">#</a> 28、</h2><p><img src="'+D+'" alt="image-20231221161759525"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>D</p><p>子类和父类间的关系是 is-a 关系</p></details><h2 id="_29、" tabindex="-1"><a class="header-anchor" href="#_29、" aria-hidden="true">#</a> 29、</h2><p><img src="'+z+'" alt="image-20231221161815200"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>B、C</p><p>注意：使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 public static final, 而接口里的方法默认情况下访问权限为 public。</p><p>因此，如果子类和父类不在同一个包中，则子类无法直接使用父类中默认修饰的成员。</p></details><h2 id="_30、" tabindex="-1"><a class="header-anchor" href="#_30、" aria-hidden="true">#</a> 30、</h2><p><img src="'+N+'" alt="image-20231221161842524"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>B</p></details><h2 id="_31、" tabindex="-1"><a class="header-anchor" href="#_31、" aria-hidden="true">#</a> 31、</h2><p><img src="'+V+'" alt="image-20231221161855775"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>A</p></details><h2 id="_32、" tabindex="-1"><a class="header-anchor" href="#_32、" aria-hidden="true">#</a> 32、</h2><p><img src="'+G+'" alt="image-20231221161926540"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>A、B、C、D</p></details><h2 id="_33、" tabindex="-1"><a class="header-anchor" href="#_33、" aria-hidden="true">#</a> 33、</h2><p><img src="'+H+'" alt="image-20231221161944854"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>A</p></details><h2 id="_34、" tabindex="-1"><a class="header-anchor" href="#_34、" aria-hidden="true">#</a> 34、</h2><p><img src="'+J+'" alt="image-20231221162014310"></p><p><img src="'+K+'" alt="image-20231221162028235"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>fish eat shrimp!</p><p>lion eat meat!</p></details><h2 id="_35、" tabindex="-1"><a class="header-anchor" href="#_35、" aria-hidden="true">#</a> 35、</h2><p><img src="'+L+'" alt="image-20231221162055511"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>implemented f1</p><p>implemented f2</p><p>implemented f3</p></details><h2 id="_36、" tabindex="-1"><a class="header-anchor" href="#_36、" aria-hidden="true">#</a> 36、</h2><p><img src="'+M+'" alt="image-20231221162121798"></p><p><img src="'+P+'" alt="image-20231221162132112"></p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>C</p><p>注意：</p><ul><li><p>黄色语句错误原因：Outer 的实例 oc 不能调用Inner，Outer类可以调用Inner</p></li><li><p>绿色语句是打算在外部类以外创建内部类，此时需要使用以下方式：</p><p><code>Outer.Inner ic = oc.new Inner();</code></p></li></ul><p>可见第 37 题</p></details><h2 id="_37、" tabindex="-1"><a class="header-anchor" href="#_37、" aria-hidden="true">#</a> 37、</h2><p><img src="'+Q+'" alt="image-20231221162305323"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>innout</p></details>',116),U=[T];function W(X,Y){return s(),e("div",null,U)}const $=a(R,[["render",W],["__file","A04Object-oriented2.html.vue"]]);export{$ as default};
