import{_ as a,o as s,c as n,d as t}from"./app-b8bf1712.js";const e="/assets/01-16cd7c63.png",p="/assets/02-993b352c.png",i="/assets/03-23545f8f.png",c="/assets/04-077e8b6d.png",l="/assets/05-ce078961.png",o="/assets/06-8988b0b4.png",r="/assets/07-82d44f10.png",d="/assets/08-a1544e93.png",m="/assets/09-c80bec8e.png",u="/assets/10-dd778b46.png",h="/assets/11-fa70c256.png",_="/assets/12-eabc8a16.png",g="/assets/13-89484618.png",k="/assets/14-d39b60b2.png",b="/assets/15-6a6e37af.png",y="/assets/16-03fddcc1.png",f="/assets/17-04a2e367.png",v="/assets/18-22164daa.png",x="/assets/19-7061c8b7.png",A="/assets/20-00ee93c5.png",w="/assets/21-cba3fd7a.png",j="/assets/22-3ccdabe5.png",W="/assets/23-8030fe50.png",B="/assets/24-83fe329e.png",q={},P=t('<h2 id="_1、" tabindex="-1"><a class="header-anchor" href="#_1、" aria-hidden="true">#</a> 1、</h2><p><img src="'+e+'" alt="image-20231221145406106"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>b=true</p><p>c=A</p><p>i=100</p><p>f=0.8</p><p>d=100.0</p><p>s=hello</p></details><h2 id="_2、" tabindex="-1"><a class="header-anchor" href="#_2、" aria-hidden="true">#</a> 2、</h2><p><img src="'+p+'" alt="image-20231221145622448"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>b=false</p><p>c=</p><p>i=0</p><p>f=0.0</p><p>d=0.0</p><p>s=null</p><p>各个数据类型未初始化的值，char为空</p></details><h2 id="_3、" tabindex="-1"><a class="header-anchor" href="#_3、" aria-hidden="true">#</a> 3、</h2><p><img src="'+i+'" alt="image-20231221145925909"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Area of r1 is:1</p><p>x 和 y 在无参构造函数中进行了初始化</p></details><h2 id="_4、" tabindex="-1"><a class="header-anchor" href="#_4、" aria-hidden="true">#</a> 4、</h2><p><img src="'+c+'" alt="image-20231221150200198"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Area of r1 is:0</p><p>x 和 y 未初始化的值是 0</p></details><h2 id="_5、" tabindex="-1"><a class="header-anchor" href="#_5、" aria-hidden="true">#</a> 5、</h2><p><img src="'+l+'" alt="image-20231221150246735"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Area of r1 is:0</p><p>Area of r1 is:6</p><p>第一行使用了无参构造函数，x 和 y 都是 0</p><p>第二行使用了有参构造函数，x 是 2，y 是 3</p></details><h2 id="_6、" tabindex="-1"><a class="header-anchor" href="#_6、" aria-hidden="true">#</a> 6、</h2><p><img src="'+o+`" alt="image-20231221150351900"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>Person初始化块：局部变量a的值大于4</p><p>Person初始化块</p><p>Person类的无参构造器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Person初始化块：局部变量a的值大于4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Person初始化块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上式为”代码初始化块“，类创建时会在执行构造方法前隐式调用它</p><p>执行顺序：代码初始化块 -&gt; 构造函数</p></details><h2 id="_7、" tabindex="-1"><a class="header-anchor" href="#_7、" aria-hidden="true">#</a> 7、</h2><p><img src="`+r+'" alt="image-20231221152025884"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>2</p><p>3</p><p>无参构造函数内部初始化</p></details><h2 id="_8、" tabindex="-1"><a class="header-anchor" href="#_8、" aria-hidden="true">#</a> 8、</h2><p><img src="'+d+`" alt="image-20231221152121243"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>W:1</p><p>W:3</p><p>W:2</p><p>执行顺序：分配空间 -&gt; 清零 -&gt; 指定初始化 -&gt; 构造函数初始化</p><p>上题的指定初始化是指：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Window</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Window</span> w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数初始化是指：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，输出：</p><p>W:1</p><p>W:3</p><p>W:2</p></details><h2 id="_9、" tabindex="-1"><a class="header-anchor" href="#_9、" aria-hidden="true">#</a> 9、</h2><p><img src="`+m+'" alt="image-20231221152436063"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>100</p><p>200</p><ul><li>传递的参数是基本数据类型（boolean、char、byte、short、int、long、float、double）则传递后，原值不发生改变。</li><li>传递的参数是引用数据类型（类、数组、接口）则传递后，原值发生改变。</li></ul><p>由于 temp 是 int 型属于基本数据类型，所以传参后 temp 维持原值不变。</p><p>而 pvt 是 类 类型属于引用数据类型，所以传参收要随着参数后续的变化而变化。</p></details><h2 id="_10、" tabindex="-1"><a class="header-anchor" href="#_10、" aria-hidden="true">#</a> 10、</h2><p><img src="'+u+'" alt="image-20231221152803572"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>100</p><p>-100</p><p>200</p><p>解析：</p><ul><li>第一行：temp 是 int 型属于基本数据类型，所以传参后 temp 维持原值不变</li><li>第二行：输出了 obj.i 的初始值，即-100</li><li>第三行：pvt 是 类 类型属于引用数据类型，所以传参收要随着参数后续的变化而变化</li></ul></details><h2 id="_11、" tabindex="-1"><a class="header-anchor" href="#_11、" aria-hidden="true">#</a> 11、</h2><p><img src="'+h+'" alt="image-20231221152922609"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>A</p><p>1</p><p>66</p><p>A</p><p>B1</p><p>67</p><p>解析：</p><ul><li>第一行：由于 65 对应着 &#39;A&#39;，所以输出 &#39;A&#39;</li><li>第二行：输出 int 类型的 1</li><li>第三行： char + int 或者 int + char 输出 int 类型，即输出 66（65 + 1）</li><li>第四行：先输出 &#39;A&#39;，再将 c 的值变为 &#39;B&#39;（&#39;A&#39; ++）</li><li>第五行：由于上句已将 c 的值改为了 &#39;B&#39;，整句话是将 s、c、i 以字符串的方式连起来，所以会输出 B1（s 为空，c 为 B，i 为 1）</li><li>第六行： <ul><li>由于 s 在尾部，整句话以 int 的方式进行输出，即输出 67（B 对应 66，66 + 1 = 67）</li><li>如果 s 在第一位（s + i + c）或第二位（i + s + c），则均以字符串的形式输出</li></ul></li></ul></details><h2 id="_12、" tabindex="-1"><a class="header-anchor" href="#_12、" aria-hidden="true">#</a> 12、</h2><p><img src="'+_+'" alt="image-20231221153043440"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>no paramenters</p><p>char</p><p>int</p><p>double</p><p>int, float</p><p>float, int</p><p>观察数据类型及其顺序</p></details><h2 id="_13、" tabindex="-1"><a class="header-anchor" href="#_13、" aria-hidden="true">#</a> 13、</h2><p><img src="'+g+'" alt="image-20231221153314903"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>27</p><p>34</p></details><h2 id="_14、" tabindex="-1"><a class="header-anchor" href="#_14、" aria-hidden="true">#</a> 14、</h2><p><img src="'+k+'" alt="image-20231221153356265"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>x=3 y=2</p><p>z=100</p></details><h2 id="_15、" tabindex="-1"><a class="header-anchor" href="#_15、" aria-hidden="true">#</a> 15、</h2><p><img src="'+b+'" alt="image-20231221153455829"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>x=3 y=0</p><p>z=100</p></details><h2 id="_16、" tabindex="-1"><a class="header-anchor" href="#_16、" aria-hidden="true">#</a> 16、</h2><p><img src="'+y+'" alt="image-20231221153612293"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>无法运行。</p><p>错误原因：java: 可能尚未初始化变量x</p><p>局部变量未初始化</p></details><h2 id="_17、" tabindex="-1"><a class="header-anchor" href="#_17、" aria-hidden="true">#</a> 17、</h2><p><img src="'+f+'" alt="image-20231221153738401"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>无名氏说：你好</p><p>无语...</p><p>无参构造函数中使用 this 关键字调用了有参构造函数，初始化了name、age 和 gender</p></details><h2 id="_18、" tabindex="-1"><a class="header-anchor" href="#_18、" aria-hidden="true">#</a> 18、</h2><p><img src="'+v+'" alt="image-20231221153830466"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>10,10,10,0</p><p>-1,-1,10,-1</p><p>20,20,10,-1</p><p>static 所修饰的变量，为所有成员所共享</p></details><h2 id="_19、" tabindex="-1"><a class="header-anchor" href="#_19、" aria-hidden="true">#</a> 19、</h2><p><img src="'+x+`" alt="image-20231221153921789"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>static block</p><p>f</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;static block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码为静态初始化块，在类加载时执行，在构造函数前</p><p>注意：</p><p>如果程序同时有<strong>静态初始化块</strong>和<strong>代码初始化块</strong>时，先执行静态初始化块，再执行代码初始化块</p></details><h2 id="_20、" tabindex="-1"><a class="header-anchor" href="#_20、" aria-hidden="true">#</a> 20、</h2><p><img src="`+A+'" alt="image-20231221154022242"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>static block</p><p>f</p><p>f</p><p>f</p><p>静态初始化块只执行一次，但是代码初始化块可执行多次</p></details><h2 id="_21、" tabindex="-1"><a class="header-anchor" href="#_21、" aria-hidden="true">#</a> 21、</h2><p><img src="'+w+'" alt="image-20231221154059443"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>static block</p><p>As</p><p>实例化对象（new As()）会自动加载类 -&gt; 执行静态初始化块 -&gt; 执行构造函数</p></details><h2 id="_22、" tabindex="-1"><a class="header-anchor" href="#_22、" aria-hidden="true">#</a> 22、</h2><p><img src="'+j+'" alt="image-20231221154207755"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>static block</p><p>As</p><p>As</p><p>As</p><p>静态初始化块只执行一次</p></details><h2 id="_23、" tabindex="-1"><a class="header-anchor" href="#_23、" aria-hidden="true">#</a> 23、</h2><p><img src="'+W+'" alt="image-20231221154241788"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>A:1</p><p>static block</p><p>A:2</p><p>静态属性安定义顺序执行</p><p>如果上述代码有代码初始化块，则代码初始化块在最后执行</p></details><h2 id="_24、" tabindex="-1"><a class="header-anchor" href="#_24、" aria-hidden="true">#</a> 24、</h2><p><img src="'+B+'" alt="image-20231221154355023"></p><details class="custom-container details"><summary class="custom-container-title">程序运行结果</summary><p>W:3</p><p>W:1</p><p>House</p><p>W:2</p><p>优先执行静态变量 -&gt; 非静态后续执行</p></details>',72),S=[P];function O(z,H){return s(),n("div",null,S)}const N=a(q,[["render",O],["__file","A03Object-oriented1.html.vue"]]);export{N as default};
