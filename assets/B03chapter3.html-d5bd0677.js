import{_ as t,o as e,c as o,d as a,a as n,b as s}from"./app-b8bf1712.js";const p="/assets/chapter1-7bdd04dd.png",c={},i=a('<h2 id="简单控件的使用" tabindex="-1"><a class="header-anchor" href="#简单控件的使用" aria-hidden="true">#</a> 简单控件的使用</h2><ul><li>控件是界面组成的主要元素，用户直接与控件进行交互</li></ul><h3 id="textview" tabindex="-1"><a class="header-anchor" href="#textview" aria-hidden="true">#</a> TextView</h3><ul><li><code>TextView</code> 控件用于显示文本信息</li></ul><table><thead><tr><th>布局属性</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>id</strong></td><td>设置 <code>TextView</code> 控件的<strong>唯一标识</strong></td></tr><tr><td><strong>layout_width</strong></td><td>设置 <code>TextView</code> 控件的<strong>宽度</strong></td></tr><tr><td><strong>layout_height</strong></td><td>设置 <code>TextView</code> 控件的<strong>高度</strong></td></tr><tr><td><strong>gravity</strong></td><td>设置 <code>TextView</code> 控件<strong>内容的对齐方向</strong></td></tr><tr><td><strong>text</strong></td><td>设置<strong>文本内容</strong></td></tr><tr><td><strong>textColor</strong></td><td>设置<strong>文本颜色</strong></td></tr><tr><td><strong>textStyle</strong></td><td>设置<strong>字体风格</strong>【 <code>bold</code>、 <code>italic</code>、 <code>normal</code>】</td></tr><tr><td><strong>textSize</strong></td><td>设置<strong>字体大小</strong>【 单位用 <code>sp</code>】</td></tr><tr><td><strong>background</strong></td><td>设置 <code>TextView</code> 控件的<strong>背景</strong></td></tr><tr><td><strong>layout_margin</strong></td><td>设置当前控件与外部元素的距离</td></tr><tr><td><strong>padding</strong></td><td>设置当前控件与该控件内容直接的距离</td></tr><tr><td><strong>layout_centerHorizontal</strong></td><td>设置 ImageView 控件是否<strong>水平居中</strong></td></tr><tr><td><strong>layout_centerVertical</strong></td><td>设置 ImageView 控件是否<strong>垂直居中</strong></td></tr><tr><td><strong>layout_centerInParent</strong></td><td>设置 ImageView 控件是否在<strong>水平垂直居中</strong></td></tr><tr><td><strong>ellipsize</strong></td><td>内容无法完整显示时，用 <code>···</code> 表示</td></tr></tbody></table><ul><li>通过 <code>id.getText().toString()</code> 可取得 <code>TextView</code> 中的数据</li></ul>',6),l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[n("code",null,"gravity"),s(" ：设置控件中内容的位置")]),n("p",null,[n("code",null,"layout_gravity"),s(" ：设置控件的位置")])],-1),u=a(`<h3 id="button" tabindex="-1"><a class="header-anchor" href="#button" aria-hidden="true">#</a> Button</h3><ul><li><code>Button</code> 控件表示按钮，它继承自 <code>TextView</code> 控件，既可以显示文本，又可以显示图片，同时也允许用户通过点击来执行操作，当 <code>Button</code> 控件被点击时，被按下与弹起的背景会有一个动态的切换效果，这个效果就是点击效果</li></ul><p>点击事件实现方式</p><ol><li><p>在布局文件中指定 <code>Button</code> 控件的 <code>onClick</code> 属性方式</p><ul><li><p>在 <code>layout</code> 文件中指定 <code>onClick</code> 属性</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:onClick=&quot;click1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 <code>Activity</code> 中实现这个 <code>click</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>

<span class="token comment">// 类 myActivity 中编辑如下信息</span>
<span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 方法 onCreate() 中编辑如下信息</span>
btn1 <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 类 myActivity 中编辑如下信息</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click1</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span><span class="token punctuation">{</span>
    btn1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;按钮1被点击！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>匿名内部类方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>

<span class="token comment">// 类 myActivity 中编辑如下信息</span>
<span class="token class-name">Button</span> btn2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 方法 onCreate() 中编辑如下信息</span>
btn2 <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>

btn2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btn2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;按钮2被点击！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口方式【不推荐使用】</p><ul><li><p>设置 <code>Button</code> 控件的点击监听事件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>btn3<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>接着当前 <code>Activity</code> 实现 <code>onClickListener</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实现 <code>onClickListener</code> 接口中的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类 MainActivity 中编辑如下信息</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    btn3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;按钮3被点击！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="edittext" tabindex="-1"><a class="header-anchor" href="#edittext" aria-hidden="true">#</a> EditText</h3><ul><li><code>EditText</code> 表示编辑框，它是 <code>TextView</code> 的子类，用户可以在此控件中输入信息</li></ul><table><thead><tr><th>属性名称</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>hint</strong></td><td>提示文本信息</td></tr><tr><td><strong>textColorHint</strong></td><td>提示文本信息的颜色</td></tr><tr><td><strong>password</strong></td><td>输入内容显示为 <code>······</code></td></tr><tr><td><strong>phoneNumber</strong></td><td>输入内容只能是数字</td></tr><tr><td><strong>minLines</strong></td><td>输入内容的最小行数</td></tr><tr><td><strong>singleLine</strong></td><td>只允许单行输入</td></tr><tr><td><strong>scrollHorizontally</strong></td><td>输入内容超出 <code>EditText</code> 的宽度时，是否出现横拉条</td></tr><tr><td><strong>editable</strong></td><td>是否可以编辑</td></tr><tr><td><strong>selectAllOnFocus</strong></td><td>设置点击 <code>EditText</code> 时是否选中全部内容</td></tr><tr><td><strong>layout_centerHorizontal</strong></td><td>设置 ImageView 控件是否<strong>水平居中</strong></td></tr><tr><td><strong>layout_centerVertical</strong></td><td>设置 ImageView 控件是否<strong>垂直居中</strong></td></tr><tr><td><strong>layout_centerInParent</strong></td><td>设置 ImageView 控件是否在<strong>水平垂直居中</strong></td></tr></tbody></table><p>限制 EditText 输入类型</p><p><img src="`+p+'" alt="image-20231124213119600"></p><h3 id="imageview" tabindex="-1"><a class="header-anchor" href="#imageview" aria-hidden="true">#</a> ImageView</h3><ul><li><code>ImageView</code> 表示图片，它继承自 <code>View</code> ，可以加载各种图片资源</li></ul><table><thead><tr><th>属性名称</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>id</strong></td><td>设置 <code>ImageView</code> 控件的<strong>唯一标识</strong></td></tr><tr><td><strong>layout_width</strong></td><td>设置 <code>ImageView</code> 控件的<strong>宽度</strong></td></tr><tr><td><strong>layout_height</strong></td><td>设置 <code>ImageView</code> 控件的<strong>高度</strong></td></tr><tr><td><strong>background</strong></td><td>设置 <code>ImageView</code> 控件的<strong>背景</strong></td></tr><tr><td><strong>layout_margin</strong></td><td>设置当前控件与外部元素的距离</td></tr><tr><td><strong>padding</strong></td><td>设置当前控件与该控件内容直接的距离</td></tr><tr><td><strong>src</strong></td><td>设置 <code>ImageView</code> 控件需要显示的<strong>图片资源</strong></td></tr><tr><td><strong>scaleType</strong></td><td>将图片资源移动或缩放以<strong>适应</strong> <code>ImageView</code> 的<strong>尺寸</strong></td></tr><tr><td><strong>tint</strong></td><td>将图片<strong>渲染</strong>成指定的颜色</td></tr><tr><td><strong>layout_centerHorizontal</strong></td><td>设置 ImageView 控件是否<strong>水平居中</strong></td></tr><tr><td><strong>layout_centerVertical</strong></td><td>设置 ImageView 控件是否<strong>垂直居中</strong></td></tr><tr><td><strong>layout_centerInParent</strong></td><td>设置 ImageView 控件是否在<strong>水平垂直居中</strong></td></tr></tbody></table><h3 id="radiobutton" tabindex="-1"><a class="header-anchor" href="#radiobutton" aria-hidden="true">#</a> RadioButton</h3><ul><li><code>RadioButton</code> 为单选按钮， <code>android:checked</code> 属性指定是否选中的状态</li><li><code>RadioGroup</code> 是单选组合框，可容纳多个 <code>RadioButton</code>，并把它们组合在一起，实现单选状态</li></ul>',14),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("要为每个 "),n("code",null,"RadioButton"),s(" 添加一个 "),n("code",null,"id"),s(" ，否则单选功能会失效")])],-1),r=a(`<h3 id="checkbox" tabindex="-1"><a class="header-anchor" href="#checkbox" aria-hidden="true">#</a> CheckBox</h3><ul><li><code>CheckBox</code> 表示复选框，它是 <code>Button</code> 的子类，用于实现多选功能，通过 <code>android:checked</code> 属性指定<code>CheckBox</code> 控件是否选中的状态</li></ul><h3 id="toast" tabindex="-1"><a class="header-anchor" href="#toast" aria-hidden="true">#</a> Toast</h3><ul><li><code>Toast</code> 是 <code>Android</code> 系统提供的轻量级信息提醒机制，用于向用户提示即时消息，它显示在应用程序界面的最上层，显示一段事件后自动消失不会打断当前操作，也不获得焦点</li></ul><p><code>Toast</code> 的基本用法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">&quot;Hello, Toast!&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第一个参数表示当前活动或应用程序的上下文对象，例如：<code>MainActivity.this</code></li><li>第二个参数表示消息内容</li><li>第三个参数表示 <code>Toast</code> 的显示时长，可以是 <code>Toast.LENGTH_SHORT</code> （短时）或 <code>Toast.LENGTH_LONG</code> （长时）</li></ul><h2 id="alertdialog-对话框的使用" tabindex="-1"><a class="header-anchor" href="#alertdialog-对话框的使用" aria-hidden="true">#</a> AlertDialog 对话框的使用</h2><ul><li><code>AlertDialog</code> 对话框用于提示一些重要信息或者显示一些需要用户额外交互的内容。它一般以小窗口的形式展示在界面上。使用 <code>AlertDialog</code> 创建的对话框一般包含标题、内容和按钮三个区域。</li></ul><h3 id="普通对话框" tabindex="-1"><a class="header-anchor" href="#普通对话框" aria-hidden="true">#</a> 普通对话框</h3><ul><li>普通对话框的内容区域一般显示简单的文本信息。通过 <code>setMessage()</code> 方法设置的</li></ul><ol><li>创建对话框的 <code>builder</code> 对象，用于构建一个对话框的模板</li><li>对 <code>builder</code> 的 <code>setxxx</code> 方法进行链式调用实现对话框的基本结构</li><li><code>builder</code> 对象调用 <code>create()</code> 方法创建一个对话框对象</li><li>用该对象调用 <code>show()</code> 方法</li></ol><p>实例：退出 <code>app</code> 对话框</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 创建对话框的 builder 对象，用于构建一个对话框的模板</span>
<span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 对 builder 的 setxxx 方法进行链式调用实现对话框的基本结构</span>
builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>beer<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;退出&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;确定退出APP？&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//               对话框退出</span>
               dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//               当前页面退出</span>
               <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           	   dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. builder 对象调用 create() 方法创建一个对话框对象</span>
<span class="token class-name">AlertDialog</span> ad <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 用该对象调用 show() 方法</span>
ad<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单选对话框" tabindex="-1"><a class="header-anchor" href="#单选对话框" aria-hidden="true">#</a> 单选对话框</h3><ul><li>单选对话框的内容区域显示为单选列表。单选列表通过 <code>AlertDialog.Builder</code> 对象调用 <code>setSingleChoiceItem()</code> 方法设置的</li></ul><p>实例：选择字号对话框</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 创建对话框的 builder 对象，用于构建一个对话框的模板</span>
<span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 对 builder 的 setxxx 方法进行链式调用实现对话框的基本结构</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> showMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;小号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;默认&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大号&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> checked <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> txtSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>beer<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;修改文本大小&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//  参数：1. 设置选项内容； 2. 默认选项； 3. 建立监听，允许被点击</span>
       <span class="token punctuation">.</span><span class="token function">setSingleChoiceItems</span><span class="token punctuation">(</span>showMsg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               checked<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> which<span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//               设置字号</span>
               txtTitle<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>txtSize<span class="token punctuation">[</span>checked<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. builder 对象调用 create() 方法创建一个对话框对象</span>
<span class="token class-name">AlertDialog</span> ad <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 用该对象调用 show() 方法</span>
ad<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多选对话框" tabindex="-1"><a class="header-anchor" href="#多选对话框" aria-hidden="true">#</a> 多选对话框</h3><ul><li>多选对话框的内容区域显示为多选列表。多选列表通过 <code>AlertDialog.Builder</code> 对象调用 <code>setMultiChoiceItem()</code> 方法设置的</li></ul><p>实例：兴趣爱好对话框</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 创建对话框的 builder 对象，用于构建一个对话框的模板</span>
<span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 对 builder 的 setxxx 方法进行链式调用实现对话框的基本结构</span>

<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> showMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;学习&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;做饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;看电影&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;跑步&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isCheck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>beer<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;请选择爱好&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//       参数：1. 设置选项内容； 2. 默认选项布尔数组； 3. 建立监听，允许被点击</span>
       <span class="token punctuation">.</span><span class="token function">setMultiChoiceItems</span><span class="token punctuation">(</span>showMsg<span class="token punctuation">,</span> isCheck<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnMultiChoiceClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
<span class="token comment">//           which 接收被选中选项的索引，isChecked 接收选项的选中状态，选中返回true</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//               更新 isCheck 列表</span>
               isCheck<span class="token punctuation">[</span>which<span class="token punctuation">]</span> <span class="token operator">=</span> isChecked<span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isCheck<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span>isCheck<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                       sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>showMsg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; | &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                   sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. builder 对象调用 create() 方法创建一个对话框对象</span>
<span class="token class-name">AlertDialog</span> ad <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 用该对象调用 show() 方法</span>
ad<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义对话框【暂时不讲】" tabindex="-1"><a class="header-anchor" href="#自定义对话框【暂时不讲】" aria-hidden="true">#</a> 自定义对话框【暂时不讲】</h3><p>略。。。</p><h2 id="listview-的使用" tabindex="-1"><a class="header-anchor" href="#listview-的使用" aria-hidden="true">#</a> ListView 的使用</h2><h3 id="listview" tabindex="-1"><a class="header-anchor" href="#listview" aria-hidden="true">#</a> ListView</h3><ul><li><code>ListView</code> 以列表的形式展示数据内容，并且能够根据列表的高度自适应屏幕显示</li></ul><p><code>ListView</code> 中的属性</p><table><thead><tr><th>属性名称</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>listSelector</strong></td><td>当条目被点击后，改变条目的颜色</td></tr><tr><td><strong>divider</strong></td><td>设置分割线的颜色</td></tr><tr><td><strong>dividerHeight</strong></td><td>设置分割线的高度</td></tr><tr><td><strong>scrollbars</strong></td><td>是否显示滚动条</td></tr><tr><td><strong>fadingEdge</strong></td><td>去掉上边和下边的黑色阴影</td></tr></tbody></table>`,29),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[n("code",null,"ListView"),s(" 搭配 适配器 （ "),n("code",null,"Adapter"),s(" ）进行使用")])],-1),v=a(`<h3 id="适配器-adapter" tabindex="-1"><a class="header-anchor" href="#适配器-adapter" aria-hidden="true">#</a> 适配器（Adapter）</h3><ul><li><code>BaseAdater</code> 是基本的适配器。它实际上是一个抽象类，通常在自定义适配器时会继承 <code>BaseAdapter</code></li></ul><p><code>BaseAdapter</code> 中的方法</p><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>public int getCount()</strong></td><td>获取 <code>Item</code> 条目的总数</td></tr><tr><td><strong>public Object getItem(int position)</strong></td><td>根据 <code>position</code> 获取某个 <code>Item</code> 的对象</td></tr><tr><td><strong>public long getItemId(int position)</strong></td><td>根据 <code>position</code> 获取某个 <code>Item</code> 的 <code>id</code></td></tr><tr><td><strong>public View getView(int position, View convertView, ViewGroup parent)</strong></td><td>获取相应 <code>position</code> 对应的 <code>Item</code> 视图，<code>position</code> 是当前 <code>Item</code> 的位置，<code>convertView</code> 用于复用旧视图，<code>parent</code> 用于加载 <code>XML</code> 布局</td></tr></tbody></table><ul><li><p><code>SimpleAdapter</code> 继承自 <code>BaseAdapter</code> ，实现了 <code>BaseAdapter</code> 的四个抽象方法并进行封装。因此在使用 <code>SimpleAdapter</code> 进行数据适配时，只需要在构造方法中传入相应的参数即可。 <code>SimpleAdapter</code> 的构造方法的具体信息如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SimpleAdapter</span> <span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">to</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>context</code>：上下文对象</li><li><code>data</code>：数据集合</li><li><code>resource</code>：<code>Item</code> 布局的资源 <code>id</code></li><li><code>from</code>：<code>Map</code> 集合中的 <code>Key</code> 值</li><li><code>to</code>：<code>Item</code> 布局中对应的控件</li></ul></li><li><p><code>ArrayAdapter</code> 也是 <code>BaseAdapter</code> 的子类，用法与 <code>SimpleAdapter</code> 类似，开发者只需要在构造方法里面传入相应参数即可。 <code>ArrayAdapter</code> 通常用于适配 <code>TextView</code> 控件</p></li></ul><p><code>ArrayAdapter</code> 的构造方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">)</span>
<span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">)</span>
<span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span>
<span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span>
<span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token class-name">List</span> objects<span class="token punctuation">)</span>
<span class="token class-name">ArrayAdapter</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">,</span> <span class="token class-name">List</span> objects<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recyclerview-的使用" tabindex="-1"><a class="header-anchor" href="#recyclerview-的使用" aria-hidden="true">#</a> RecyclerView 的使用</h2><ul><li><code>RecyclerView</code>：是 <code>Android5.0</code> 之后提供的用于在有限的窗口范围内显示大量数据的控件</li><li>与 <code>ListView</code> 相比，<code>RecyclerView</code> 的优势为： <ul><li>展示效果：<code>RecyclerView</code> 控件可以通过 <code>LayoutManager</code> 类实现横向或竖向的列表效果、瀑布流效果和 <code>GridView</code> 效果，而 <code>ListView</code> 控件只能实现竖直的列表效果。</li><li>适配器：<code>RecyclerView</code> 控件使用的是 <code>RecyclerView.Adapter</code> 适配器，该适配器将 <code>BaseAdapter</code> 中的 <code>getView()</code> 方法拆分为 <code>onCreateViewHolder()</code> 方法和 <code>onBindViewHolder()</code> 方法，强制使用 <code>ViewHolder</code> 类，使代码编写规范化，避免了初学者写的代码性能不佳。</li><li>复用效果：<code>RecyclerView</code> 控件复用 <code>Item</code> 对象的工作由该控件自己实现，而 <code>ListView</code> 控件复用 <code>Item</code> 对象的工作需要开发者通过 <code>convertView</code> 的 <code>setTag()</code> 方法和 <code>getTag()</code> 方法进行操作。</li><li>动画效果：<code>RecyclerView</code> 控件可以通过 <code>setItemAnimator()</code> 方法为 <code>Item</code> 添加动画效果，而 <code>ListView</code> 控件不可以通过该方法为 <code>Item</code> 添加动画效果。</li></ul></li></ul><h2 id="自定义-view" tabindex="-1"><a class="header-anchor" href="#自定义-view" aria-hidden="true">#</a> 自定义 View</h2><ul><li><p>当使用系统控件不满足需求时，需要自定义控件</p></li><li><p>最简单的自定义 <code>View</code> 就是创建一个类继承自 <code>View</code> 类或者其他子类，并重写该类的构造方法</p></li><li><p>由于系统自带的控件不能满足需求中的某种样式或功能，因此我们需要在自定义 <code>View</code> 中通过重写指定的方法来添加额外的样式和功能</p></li></ul><p>自定义 <code>View</code> 常用的 3 个方法如下：</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>onMeasure()方法</td><td>测量尺寸</td></tr><tr><td>onDraw()方法</td><td>绘制图像</td></tr><tr><td>onLayout()方法</td><td>指定布局中子控件的位置</td></tr></tbody></table><h3 id="onmeasure-方法" tabindex="-1"><a class="header-anchor" href="#onmeasure-方法" aria-hidden="true">#</a> onMeasure()方法</h3><ul><li>作用：测量尺寸</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测量模式</p><ul><li><p><code>EXACTLY</code>：当自定义控件的宽高的值设置为具体值时使用，如 <code>100dp</code> ，此时控件的宽高值是精确的尺寸。</p></li><li><p><code>AT_MOST</code>：当自定义控件的宽高值为 <code>wrap_content</code> 时使用，此时控件的宽高值是控件中的数据内容可获得的最大空间值。</p></li><li><p><code>UNSPECIFIED</code>：当父容器没有指定自定义控件的宽高值时使用。</p></li></ul><h3 id="ondraw-方法" tabindex="-1"><a class="header-anchor" href="#ondraw-方法" aria-hidden="true">#</a> onDraw()方法</h3><ul><li>作用：绘制图像</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>canvas</code> 表示画布，他与 <code>Paint</code> 类(画笔)配合使用</li></ul><h3 id="onlayout-方法" tabindex="-1"><a class="header-anchor" href="#onlayout-方法" aria-hidden="true">#</a> onLayout()方法</h3><ul><li>作用：指定布局中子控件的位置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>changed</code> 表示自定义 <code>View</code> 的大小和位置是否发生变化</p></li><li><p><code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code> 分别表示子控件与父容器左边、顶部、右边、底部的距离</p></li></ul>`,26),m=[i,l,u,d,r,k,v];function g(b,h){return e(),o("div",null,m)}const y=t(c,[["render",g],["__file","B03chapter3.html.vue"]]);export{y as default};
