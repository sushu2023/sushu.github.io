import{_ as s,o as t,c as e,e as n,a,b as o}from"./app-df719bd6.js";const l="/assets/chapter1-02879878.png",c="/assets/chapter2-6d1a813e.png",p="/assets/chapter3-22d463a9.png",i="/assets/chapter4-59ed7e9c.png",d="/assets/chapter5-47eb93c6.png",u="/assets/chapter6-1e4b3d06.png",r={},m=n('<h2 id="view-视图" tabindex="-1"><a class="header-anchor" href="#view-视图" aria-hidden="true">#</a> View 视图</h2><ul><li>所有的 <code>UI</code> 元素都是通过 <code>View</code> 与 <code>ViewGroup</code> 构建的，对于一个 <code>Android</code> 应用的用户界面来说，<code>ViewGroup</code> 作为容器显示界面中的控件，它可以包含普通的 <code>View</code> 控件，也可以包含 <code>ViewGroup</code></li></ul><h2 id="界面布局编写方式" tabindex="-1"><a class="header-anchor" href="#界面布局编写方式" aria-hidden="true">#</a> 界面布局编写方式</h2><h3 id="xml-布局【推荐】" tabindex="-1"><a class="header-anchor" href="#xml-布局【推荐】" aria-hidden="true">#</a> XML 布局【推荐】</h3><ul><li>将界面布局的代码和 <code>Java</code> 代码隔离，使程序的结构更加清晰</li></ul><h3 id="java-布局" tabindex="-1"><a class="header-anchor" href="#java-布局" aria-hidden="true">#</a> Java 布局</h3><ul><li>在 <code>.java</code> 文件中 <code>new</code> 出布局和控件的对象，将创建的 <code>View</code> 控件添加到 <code>ViewGroup</code> 进而实现 <code>View</code> 控件在布局界面中显示</li></ul><h2 id="常见界面布局" tabindex="-1"><a class="header-anchor" href="#常见界面布局" aria-hidden="true">#</a> 常见界面布局</h2>',8),k=a("div",{class:"custom-container info"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"五种常用布局"),a("ol",null,[a("li",null,"线性布局：以水平或垂直方向排列"),a("li",null,"相对布局：通过相对定位排列"),a("li",null,"帧布局：开辟空白区域，帧里的控件（层）叠加"),a("li",null,"表格布局：表格形式排列"),a("li",null,"约束布局：可视化的方式编写布局")])],-1),h=n('<h3 id="布局的通用属性" tabindex="-1"><a class="header-anchor" href="#布局的通用属性" aria-hidden="true">#</a> 布局的通用属性</h3><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能描述</th></tr></thead><tbody><tr><td style="text-align:left;">android:id</td><td style="text-align:left;">设置布局的标识</td></tr><tr><td style="text-align:left;">android:layout_width</td><td style="text-align:left;">设置布局的宽度</td></tr><tr><td style="text-align:left;">android:layout_height</td><td style="text-align:left;">设置布局的高度</td></tr><tr><td style="text-align:left;">android:background</td><td style="text-align:left;">设置布局的背景</td></tr><tr><td style="text-align:left;">android:layout_margin</td><td style="text-align:left;">设置当前布局与屏幕边界或与周围控件的距离</td></tr><tr><td style="text-align:left;">android:padding</td><td style="text-align:left;">设置当前布局与该布局中控件的距离</td></tr></tbody></table><p><code>layout_width</code> 和 <code>layout_width</code></p><ul><li><code>match_parent</code> ：适配父容器的宽高</li><li><code>wrap_content</code> ：适配内容的宽高</li><li><code>100dp</code> ：具体值</li></ul><p><code>margin</code> 和 <code>padding</code></p><ul><li><p>将页面设计看成作画。屏幕则是纸张，<code>margin</code> 是控制边界线到纸张的间距，<code>padding</code> 控制图画到边界线的间距</p></li><li><p>未设置布局的 <code>margin</code> 和 <code>padding</code></p><p><img src="'+l+'" alt="image-20231124090820952"></p></li><li><p>已设置布局的 <code>margin</code> 和 <code>padding</code></p><p><img src="'+c+'" alt="image-20231124090844977"></p></li></ul><h3 id="线性布局" tabindex="-1"><a class="header-anchor" href="#线性布局" aria-hidden="true">#</a> 线性布局</h3><ul><li>线性布局（ <code>LinearLayout</code> ）主要以水平或垂直方式来显示界面中的控件。当控件水平排列时，显示顺序依次为从左到右，当控件垂直排列时，显示顺序依次为从上到下</li></ul><p>创建线性布局的 <code>.xml</code> 文件</p><ol><li><p><code>layout</code> -&gt; <code>New</code> -&gt; <code>XML</code> -&gt; <code>Layout XML File</code></p><p><img src="'+p+'" alt="image-20231123105759716"></p></li><li><p>为文件取名，选择 <code>LinearLayout</code> 并点击 <code>Finish</code> 完成线性布局文件的创建</p><p><img src="'+i+`" alt="image-20231123110028186"></p></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线性布局详解</p><p><img src="`+d+`" alt="image-20231124092351258"></p><p>使用 <code>android:layout_weight</code> 时需把 <code>android:layout_width</code> 设置为 <code>0dp</code></p><h3 id="相对布局" tabindex="-1"><a class="header-anchor" href="#相对布局" aria-hidden="true">#</a> 相对布局</h3><ul><li>相对布局（ <code>RelativeLayout</code> ）是通过相对定位的方式指定子控件位置，即以其他控件或父容器为参照物，摆放控件位置</li></ul><p>创建相对布局 <code>.xml</code> 文件的流程同上，只需将 <code>Root Tag</code> 为 <code>RelativeLayout</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对布局详解</p><p><img src="`+u+'" alt="image-20231124092649766"></p>',20),g=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"注意"),a("p",null,[a("code",null,"RelativeLayout"),o(" 中的控件无法拖动")])],-1),v=n(`<h3 id="帧布局" tabindex="-1"><a class="header-anchor" href="#帧布局" aria-hidden="true">#</a> 帧布局</h3><ul><li>帧布局（ <code>FrameLayout</code> ）用于在屏幕上创建一块空白区域，添加到该区域中的每一个子控件占一帧，这些帧会一个一个叠加在一起，后加入的控件会叠加在上一个控件上层</li></ul><p>创建帧布局 <code>.xml</code> 文件的流程同上，只需将 <code>Root Tag</code> 为 <code>RelativeLayout</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>帧布局详解</p><p>所有控件都默认显示在屏幕左上角</p><p>常用属性：【在 <code>FrameLayout</code> 中进行编辑】</p><ul><li>**android:foreground：**设置改帧布局容器的前景图像</li><li>**android:foregroundGravity：**设置前景图像显示的位置</li></ul><h3 id="表格布局" tabindex="-1"><a class="header-anchor" href="#表格布局" aria-hidden="true">#</a> 表格布局</h3><ul><li>表格布局（ <code>TableLayout</code> ）采用行、列的形式来管理控件，它不需要明确声明包含多少行、多少列，而是通过在 TableLayout 布局中添加 TableRow 布局来控制表格的行数，通过TableRow 布局中添加控件来控制表格的列数</li></ul><p>创建表格布局 <code>.xml</code> 文件的流程同上，只需将 <code>Root Tag</code> 为 <code>TableLayout</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableRow</span><span class="token punctuation">&gt;</span></span>
        
        
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableRow</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表格布局详解</p><ol><li><p>确定行数与列数</p><ul><li>如果我们直接往 <code>TableLayout</code> 中添加组件的话，那么这个组件将占满一行</li><li>如果我们想一行上有多个组件的话，就要添加一个 <code>TableRow</code> 的容器，把组件都丢到里面</li><li><code>tablerow</code> 中的组件个数就决定了该行有多少列，而列的宽度由该列中最宽的单元格决定</li><li><code>tablerow</code> 的 <code>layout_width</code> 属性,默认是 <code>match_parent</code> 的，我们自己设置成其他的值也不会生效！！！ 但是 <code>layout_height</code> 默认是 <code>wrap_content</code> 的,我们却可以自己设置大小</li><li>整个表格布局的宽度取决于父容器的宽度（占满父容器本身）</li><li>有多少行就要自己数啦，一个 tablerow 一行，一个单独的组件也一行！多少列则是看 tableRow 中的组件个数，组件最多的就是 TableLayout 的列数</li></ul></li><li><p>表格布局属性【在 TableLayout 标签中进行编辑】</p><ul><li><strong>android:collapseColumns：<strong>设置需要</strong>被隐藏</strong>的列的序号</li><li><strong>android:shrinkColumns：<strong>设置允许</strong>被收缩</strong>的列的列序号</li><li><strong>android:stretchColumns：<strong>设置运行</strong>被拉伸</strong>的列的列序号</li></ul></li><li><p>表格布局控件属性【在控件中进行编辑】</p><ul><li><strong>android:layout_column</strong>：设置该单元显示的位置， 0 为默认下标</li><li><strong>android:layout_span</strong>：设置该单元格占据几行，默认为 1 行</li></ul></li></ol><h3 id="约束布局" tabindex="-1"><a class="header-anchor" href="#约束布局" aria-hidden="true">#</a> 约束布局</h3><ul><li>约束布局（ <code>ConstraintLayout</code> ）合适使用可视化的方式编写界面布局</li></ul><p>创建约束布局 <code>.xml</code> 文件的流程同上，只需将 <code>Root Tag</code> 为 <code>RelativeLayout</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),b=[m,k,h,g,v];function x(_,y){return t(),e("div",null,b)}const w=s(r,[["render",x],["__file","B02chapter2.html.vue"]]);export{w as default};
